package br.senai.sp.info.service.config;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

import br.senai.sp.info.service.models.Usuario;
import br.senai.sp.info.service.utils.JwtUtils;

@Component
public class JwtFilter extends HttpFilter {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Override
	protected void doFilter(HttpServletRequest req, HttpServletResponse res, FilterChain chain)
			throws IOException, ServletException {

		String authorization = req.getHeader("Authorization");

		if (authorization != null && authorization.matches("(Bearer) .*")) {

			// Pega o token dividindo o Bearer entre duas partes (Bearer) e (<token>)
			// separando por espa�o em branco ' '
			String token = authorization.split(" ")[1];

			if (JwtUtils.validarToken(token)) {

				// Pega o usu�rio do token
				Usuario usuarioAutenticado = JwtUtils.obterUsuarioDoTokenAutenticacao(token);

				System.out.println("Auth.user: " + usuarioAutenticado.getEmail());
				SecurityContextHolder.getContext().setAuthentication(usuarioAutenticado);

			} else {
				res.setHeader("X-Reason", "O token JWT informado � invalido ou foi invalidado.");
				res.setStatus(401);
			}
		} else {
			res.setHeader("X-Reason", "Header Authorization deve ser informado e deve ser do tipo Bearer");
			res.setStatus(403);
		}

		chain.doFilter(req, res);
	}

}
